
//Mark off what items are complete, and put a P if partially complete. For the categories, name the filter and its points. If you crete more than one per category, list their names and their poitns below the required command for that catagory.

//Total available points:  200(235 for CSC\CENG 524)

//    Done  20  Suitable length input video files and documentation turned in.

//Done	20	Beyond tutorial 5 - Bunny hopping(rabbit.png)

//Done 25  Resized video, frame rate, soundtrack

//Done	20	You/pet/your own image (CSC 524 video) appears in your video
//			File name of your video: fileName of image: me.png

//Done  35  Category I requirement
//			Item: 3) Added prop or character. The added item should appear to be a seamless element of the video.
//			File and location:  In movieMaker, the MakeImage function takes in the type of image to add(basket in this case) 
//           and adds it to the list of images to draw. the basket.png is located inside the res folder.                           

//Done 35  Category II requirement
//			Item: 2) Some warp that manipulates elements of an item added as in #3 above
//			File and location:  The translateBird function located inside the MovieMaker file uses translation equations to move the bird relative to the location of the basket. 
//          It is called inside the buildFrame function. The birdie.png is located inside the res folder.

//Done 35  Category III requirement
//			Item: 2) Implement chromakeying using a green background replacement.
//            How I implemented a garbage mask (if applicable): I created a sorbel edge detection filter to detect edges of the foreground image. The image generated has white edges while rest is black background.
//			I then used the image generated by the filter as garbage mask and subtracted the white edge from the image color to create a black outline for the foreground image.
//			File and location: In movieMaker, inside imageComposition function, the MakeSobelFilter function is called to generate the mask. It is then subtracted(AND) from the result of the Vlahos equations.
//          The background.jpg is located inside the res folder of the project.



//Done 10  Attended final exam to show off your video.

//------------------------------------------------------------------------------------------

//NA  35  TEAM additional length and documentation 

//NA	20	TEAM Second "Beyond tutorial 5"

//NA	35	TEAM Second "You/pet/your own image"

//NA	35	TEAM only additional item 1: 

//            < Addtional info here>

//NA	35	TEAM only additional item 2:

//            < Addtional info here>  

//------------------------------------------------------------------------------------------
//NA	35	CSC\CENG 524 ONLY additional item
//			File name of your video: 	

//------------------------------------------------------------------------------------------



//200  Total(please add the points and include the total here)




//The grade you compute is the starting point for course staff, who reserve the right to change the grade if they disagree with your assessment and to deduct points for other issues they may encounter, such as errors in the submission process, naming issues, etc.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Threading;
using System.Windows.Forms;


namespace Rotoscope
{
    /// <summary>
    /// Main form
    /// </summary>
    public partial class MainForm : Form
    {
        Movie inputMovie = null;
        private string lastSave = null;
        MovieMaker maker = null;

        /// <summary>
        /// initalizes the form
        /// </summary>
        public MainForm()
        {
            InitializeComponent();

            DoubleBuffered = true;

            UpdateMenuBar();

        }

        /// <summary>
        /// Handle the resize event
        /// </summary>
        /// <param name="e"></param>
        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);

            if (maker != null)
            {
                SetupMaker();
            }
            Invalidate();
        }

        /// <summary>
        /// Refresh the window
        /// </summary>
        public new void Invalidate()
        {
            base.Invalidate();
        }

        /// <summary>
        /// Clean up files on close
        /// </summary>
        /// <param name="e"></param>
        protected override void OnClosed(EventArgs e)
        {
            maker = null;
            inputMovie = null;
        }

        /// <summary>
        /// Paint the frame
        /// </summary>
        /// <param name="e"></param>
        protected override void OnPaint(PaintEventArgs e)
        {
            if (maker != null)
                maker.OnDraw(e.Graphics);
        }

        /// <summary>
        /// Updates what menu options are enabled and disabled
        /// </summary>
        private void UpdateMenuBar()
        {
            if (maker == null)
            {
                //file menu
                closeItem.Enabled = false;
                saveAsItem.Enabled = false;
                saveItem.Enabled = false;

                //movie menu
                closeAudioItem.Enabled = false;
                closeMovieItem.Enabled = false;
                generateVideoItem.Enabled = false;
                pullAudioItem.Enabled = false;
                generateVideoItem.Enabled = false;

                //frame menu
                createFrameItem.Enabled = false;
                writeFrameItem.Enabled = false;
                writeThenCreateFrameItem.Enabled = false;
                writeThenCreateSecondItem.Enabled = false;
                writeThenCreateRemainingItem.Enabled = false;

            }
            else
            {
                //file menu
                closeItem.Enabled = true;
                saveAsItem.Enabled = true;
                saveItem.Enabled = true;

                //movie menu
                closeMovieItem.Enabled = true;
                generateVideoItem.Enabled = true;

                if (maker.CurFrameCount > 0)
                    generateVideoItem.Enabled = true;
                else
                    generateVideoItem.Enabled = false;

                //Frame menu
                createFrameItem.Enabled = true;
                writeFrameItem.Enabled = true;
                writeThenCreateFrameItem.Enabled = true;

                if (maker.Audio != null)
                {
                    closeAudioItem.Enabled = true;
                    pullAudioItem.Enabled = true;
                }
                else
                {
                    closeAudioItem.Enabled = false;
                    useSourceAudioItem.Checked = false;
                }

                if (maker.SourceMovie != null)
                {
                    writeThenCreateSecondItem.Enabled = true;
                    writeThenCreateRemainingItem.Enabled = true;
                }
                else
                {
                    writeThenCreateSecondItem.Enabled = false;
                    writeThenCreateRemainingItem.Enabled = false;
                }
            }
        }

        /// <summary>
        /// Pulls drawing area for the movie maker, and initalizes if needed.
        /// </summary>
        private void SetupMaker()
        {
            if (maker == null)
                maker = new MovieMaker(this);

            Rectangle r = ClientRectangle;
            r.Y = menuStrip1.Height;
            maker.DrawArea = r;
        }

        #region Menu Handlers
        #region File menu
        private void newItem_Click(object sender, EventArgs e)
        {
            inputMovie = new Movie();
            SetupMaker();

            UpdateMenuBar();
            Invalidate();
        }

        private void openRotoItem_Click(object sender, EventArgs e)
        {
            if (maker == null)
            {
                MessageBox.Show("Need an opened video first!");
                return;
            }
            if (openDlgRoto.ShowDialog() == DialogResult.OK)
            {
                maker.OnOpenRotoscope(saveDlgRoto.FileName);
                lastSave = saveDlgRoto.FileName;

            }
            UpdateMenuBar();
        }

        private void saveAsRotoItem_Click(object sender, EventArgs e)
        {
            if (saveDlgRoto.ShowDialog() == DialogResult.OK)
            {
                maker.OnSaveRotoscope(saveDlgRoto.FileName);
                lastSave = saveDlgRoto.FileName;
            }
            saveDlgRoto.Dispose();
        }

        private void saveRotoItem_Click(object sender, EventArgs e)
        {
            if (lastSave != null)
            {
                maker.OnSaveRotoscope(lastSave);
            }
            else
            {
                if (saveDlgRoto.ShowDialog() == DialogResult.OK)
                {
                    maker.OnSaveRotoscope(saveDlgRoto.FileName);
                    lastSave = saveDlgRoto.FileName;
                }
                saveDlgRoto.Dispose();
            }
        }

        private void closeAllItem_Click(object sender, EventArgs e)
        {
            inputMovie = null;
            maker = null;
            UpdateMenuBar();
            Invalidate();
        }

        private void exitItem_Click(object sender, EventArgs e)
        {
            Close();
        }
        #endregion

        #region Movie Menu
        private void openSourceMovieItem_Click(object sender, EventArgs e)
        {
            if (openDlgMovie.ShowDialog() == DialogResult.OK)
            {
                if(inputMovie == null)
                {
                    inputMovie = new Movie();
                }

                inputMovie.Open(openDlgMovie.FileName);

                //the first movie opened, should set the size of the output
                SetupMaker();
                if (maker.SourceMovie == null)
                {
                    maker.Width = inputMovie.Width;
                    maker.Height = inputMovie.Height;
                }

                maker.SourceMovie = inputMovie;

                //pull audio if  desired
                if (useSourceAudioItem.Checked)
                {
                    maker.Audio = inputMovie.GetAudio();
                }
            }
            UpdateMenuBar();
            Invalidate();
        }

        private void generateVideoItem_Click(object sender, EventArgs e)
        {
            if (saveDlgOutMovie.ShowDialog() == DialogResult.OK)
            {
                if (maker != null)
                    maker.ProcClipVideo(saveDlgOutMovie.FileName);
            }
            UpdateMenuBar();
            Invalidate();
            
        }

        private void pullAudioItem_Click(object sender, EventArgs e)
        {
            if (saveDlgAudio.ShowDialog() == DialogResult.OK)
            {
                if (inputMovie != null)
                {
                    Sound sound = inputMovie.GetAudio();
                    sound.Save(saveDlgAudio.FileName, (SoundFileTypes)(saveDlgAudio.FilterIndex-1));
                }
            }

        }

        private void closeMovieItem_Click(object sender, EventArgs e)
        {
            inputMovie.Close();
            inputMovie = null;

            UpdateMenuBar();
            Invalidate();
        }


        private void openAudioItem_Click(object sender, EventArgs e)
        {
            if (openDlgAudio.ShowDialog() == DialogResult.OK)
            {
                if (maker != null)
                {
                    maker.Audio=new SoundStream(openDlgAudio.FileName);
                    useSourceAudioItem.Checked = false;
                    openAudioItem.Checked = true;
                }
            }

            UpdateMenuBar();
            Invalidate();
        }

        private void closeAudioItem_Click(object sender, EventArgs e)
        {
            maker.Audio= null;
            UpdateMenuBar();
            Invalidate();
        }

        private  void useSourceAudioItem_Click(object sender, EventArgs e)
        {
            useSourceAudioItem.Checked = !useSourceAudioItem.Checked;

            if (maker != null) {
                if (useSourceAudioItem.Checked)
                {
                    maker.Audio=  inputMovie.GetAudio();
                    openAudioItem.Checked = false;
                }
                else
                {
                    maker.Audio.Close();
                    maker.Audio=null;
                }
            }
            UpdateMenuBar();
            
        }
        #endregion

        #region Frame menu

        private void createFrameItem_Click(object sender, EventArgs e)
        {
            maker.CreateOneFrame();
            Invalidate();
        }

        private  void writeThenCreateFrameItem_Click(object sender, EventArgs e)
        {
            maker.WriteFrame();
            maker.CreateOneFrame();
            Invalidate();
        }

        private void writeFrameItem_Click(object sender, EventArgs e)
        {
            maker.WriteFrame();
        }

        private void writeThenCreateSecondItem_Click(object sender, EventArgs e)
        {
            ProgressBar dlg = new ProgressBar();
            dlg.Show();
            int count = (int)(maker.FPS + 0.5);
            for (int i = 0; i < count; i++)
            {
                maker.WriteFrame();
                maker.CreateOneFrame();
               
                //out of bound check?
                if (!inputMovie.HasMoreVideo)
                    break;

                dlg.UpdateProgress(i / count);
            }

            dlg.Dispose();
            UpdateMenuBar();

        }

        private void writeThenCreateRemainingItem_Click(object sender, EventArgs e)
        {
            var watch = new System.Diagnostics.Stopwatch();

            watch.Start();
            int count = inputMovie.TotalFrames - inputMovie.Position+1;
            float i = 0;

            ProgressBar dlg = new ProgressBar();
            dlg.Show();

            //TODO remove 1000  later
            while (inputMovie.HasMoreVideo)
            {
                maker.WriteFrame();
                maker.CreateOneFrame();
                dlg.UpdateProgress( i / count);
                i++;
            }
            dlg.Dispose();


            watch.Stop();

            Debug.WriteLine($"Execution Time: {watch.ElapsedMilliseconds} ms");
            UpdateMenuBar();
        }
        #endregion

        #endregion

        #region Mouse handlers
        private bool mouseDown = false;

        /// <summary>
        /// Handles all mouse down and move events
        /// </summary>
        /// <param name="x">X pixel </param>
        /// <param name="y">Y pixel</param>
        public void Mouse(int x, int y)
        {
            if (maker != null)
                maker.Mouse(x, y - menuStrip1.Height); 
            Invalidate();
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            Mouse(e.X, e.Y);
            mouseDown = true;
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            mouseDown = false;
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            if (mouseDown)
                Mouse(e.X, e.Y);
        }



        #endregion


        /// <summary>
        /// Helper function to delete files that may temporarily be in use while closing a folder.
        /// </summary>
        /// <param name="file">file to delete</param>
        public static void VolitilePermissionDelete(string file)
        {
            //delete file
            int maxAttempts = 10;
            int attempt = 0;
            bool success = false;
            while (!success && attempt < maxAttempts)
            {
                try
                {
                    File.Delete(file);
                    success = true;
                }
                catch (Exception)
                {
                    Debug.WriteLine("File delayed: " + file); //delay slightly for the filesystem to catchup
                    Thread.Sleep(200);
                }
            }

            if (!success)
                Debug.WriteLine("File could not be deleted: " + file);
        }

        private void clearFrameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            maker.OnEditClearFrame();
            Invalidate();
        }

        private void drawLineToolStripMenuItem_Click(object sender, EventArgs e)
        {
            maker.DrawLineOnVid();
            Invalidate();
        }


        private void makeRedToolStripMenuItem_Click(object sender, EventArgs e)
        {
            maker.makeColor(Color.Red);
            Invalidate();
        }

        private void makeWhiteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            maker.makeColor(Color.White);
            Invalidate();
        }

        private void makeGreenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            maker.makeColor(Color.Green);
            Invalidate();
        }

        private void addBirdToolStripMenuItem_Click(object sender, EventArgs e)
        {

            maker.makeImage("bird");
        }

        private void drawHatToolStripMenuItem_Click(object sender, EventArgs e)
        {
            maker.makeImage("hat");
        }

        private void drawBasketToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //BASKET
            maker.makeImage("basket");
            maker.WriteFrame();
            maker.CreateOneFrame();
            Invalidate();
        }


        private void key_pressed(object sender, KeyPressEventArgs e)
        {
                //BASKET
                maker.makeImage("basket");
                maker.WriteFrame();
                maker.CreateOneFrame();
                Invalidate();
            
        }

        private void DrawMeMenuItem_Click(object sender, EventArgs e)
        {
            maker.makeImage("me");
            Invalidate();
        }
    }
}
